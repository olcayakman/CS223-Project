`timescale 1ns / 1ps


module calculator(input clk,
                  input r, a, m, d, dr,
                  input signed [7:0] firstNumber, secondNumber,
                  output logic [7:0] ledsFirst, ledsSecond,
                  output logic [6:0] seg, logic dp,
                  output logic [3:0] an);
    
    logic [2:0] alu_signal;
    logic displayU;
    logic [15:0] result;
    int resInt;
    logic yak, sondur;
    logic flag;
    initial flag = 0;
    initial yak = 1;
    initial sondur = 0;
    logic [6:0] preSeg;
    int res0, res1, res2, res3;
    logic clkSlow;
    logic sttIsReset;
    
    always_comb
        begin
            ledsFirst = firstNumber;
            ledsSecond = secondNumber;
            result = resInt;
            if (resInt < 0)
                result = ~result + 1;
        end
    
    always @ (posedge clkSlow)
        begin
            //flag = ~flag;
            if (flag == 1)
                yak = ~yak;
        end
    
    always @ (negedge clkSlow)
        begin
            flag = ~flag;
            if (flag == 1) 
                sondur = ~sondur;
        end
        
    //sevseg display helper
    always_ff @ (posedge clk)
        begin
            if (yak)
                begin
                    seg <= preSeg;
                    if (displayU == 1)
                        begin
                            res3 = 5'd17;
                            res2 = 5'd17;
                            res1 = 5'd17;
                            res0 = 5'd18;
                        end
                    else 
                        begin
                            if (resInt < 0)
                                begin
                                    if (resInt < -4095)
                                        begin
                                            res3 = 5'd16;
                                            res2 = result[15:12];
                                            res1 = result[11:8];
                                            res0 = result[7:4];
                                        end
                                    else
                                        begin
                                            res3 = 5'd16;
                                            res2 = result[11:8];
                                            res1 = result[7:4];
                                            res0 = result[3:0];
                                        end
                                end
                            else //result is positive
                                begin
                                    res3 = result[15:12];
                                    res2 = result[11:8];
                                    res1 = result[7:4];
                                    res0 = result[3:0];
                                end
                        end
                    if (sondur && ~sttIsReset)
                        seg <= 7'b1111111;
                end
        end
        
        controller myController(clk, r, a, m, d, dr, alu_signal, sttIsReset);
            
        alu myAlu(firstNumber, secondNumber, alu_signal, resInt, displayU);
         
        SevSeg_4digit mySevSeg(clk, res0, res1, res2, res3, preSeg, dp, an);
        
        clockDivider div(clk, clkSlow);
                  
endmodule









`timescale 1ns / 1ps


module controller(input logic clk,
                  input r, a, m, d, dr,
                  output logic [2:0] alu_signal,
                  output logic sttIsReset);
             
    typedef enum logic [2:0] {s0, s1, s2, s3, s4} state;
    state [2:0] currentState, nextState;
    
    //next state logic
    always_ff @ (posedge clk, posedge r)
        begin
            if (r)
                nextState = s0;
            else
                case (currentState)
                    s0: //reset state
                        begin
                            if (a)
                                nextState = s1;
                            else if (m)
                                nextState = s2;
                            else if (d)
                                nextState = s3;
                            else if (dr)
                                nextState = s4;
                            else
                                nextState = s0;
                        end
                    s1: //addition state
                        begin
                            if (r)
                                nextState = s0;
                            else 
                                nextState = s1;
                        end
                    s2: //multiplication state
                        begin
                            if (r)
                                nextState = s0;
                            else 
                                nextState = s2;
                        end
                    s3: //division state
                        begin
                            if (r)
                                nextState = s0;
                            else
                                nextState = s3;
                        end
                    s4: //division remainder state
                        begin
                            if (r)
                                nextState = s0;
                            else
                                nextState = s4;
                        end
                    default: nextState = s0;
                endcase
        end
  
    //state register
    always_ff @ (posedge clk)
        begin
            if (r)
                currentState <= s0;
            else
                currentState <= nextState;
        end
    
    //output logic
    always_comb
        begin
            if (currentState == s0)
                begin
                    alu_signal = 3'b000; //reset - r
                end
            else if (currentState == s1)
                begin
                    alu_signal = 3'b001; //addition - a
                end
            else if (currentState == s2)
                begin
                    alu_signal = 3'b010; //multiplication - m
                end
            else if (currentState == s3)
                begin
                    alu_signal = 3'b011; //division - d
                end
            else if (currentState == s4)
                begin
                    alu_signal = 3'b100; //division remainder - dr
                end
        end
        assign sttIsReset = (currentState == s0);
        
    
endmodule

















`timescale 1 ps / 1 ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Hamzeh Ahangari
// 
// Create Date: 
// Design Name: 
// Module Name: 
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// this module shows 4 decimal numbers on 4-digit 7-Segment.  
// 4 digits are scanned with high speed, then you do not notice that every time 
// only one of them is ON. dp is always off.

// LED positions inside 7-segment
//    A -->  /seg[6]
//  F   B
//    G -->  /seg[0]
//  E   C
//    D   DP

// digit positions on Basys3 :
// in3(left), in2, in1, in0(right)


module SevSeg_4digit(
 input clk,
 input [4:0] in0, in1, in2, in3, //user inputs for each digit (hexadecimal value)
 output [6:0]seg, logic dp, // just connect them to FPGA pins (individual LEDs).
 output [3:0] an   // just connect them to FPGA pins (enable vector for 4 digits active low)
 );
 
// divide system clock (100Mhz for Basys3) by 2^N using a counter, which allows us to multiplex at lower speed
localparam N = 18;
logic [N-1:0] count = {N{1'b0}}; //initial value
always@ (posedge clk)
	count <= count + 1;

 
logic [4:0]digit_val; // 7-bit register to hold the current data on output
logic [3:0]digit_en;  //register for the 4 bit enable
 
always@ (*)
 begin
 digit_en = 4'b1111; //default
 digit_val = in0; //default
 
  case(count[N-1:N-2]) //using only the 2 MSB's of the counter 
    
   2'b00 :  //select first 7Seg.
    begin
     digit_val = in0;
     digit_en = 4'b1110;
    end
    
   2'b01:  //select second 7Seg.
    begin
     digit_val = in1;
     digit_en = 4'b1101;
    end
    
   2'b10:  //select third 7Seg.
    begin
     digit_val = in2;
     digit_en = 4'b1011;
    end
     
   2'b11:  //select forth 7Seg.
    begin
     digit_val = in3;
     digit_en = 4'b0111;
    end
  endcase
 end
 

//Convert digit number to LED vector. LEDs are active low.
logic [6:0] sseg_LEDs; 
always @(*)
 begin 
  sseg_LEDs = 7'b1111111; //default
  case(digit_val)
   5'd0 : sseg_LEDs = 7'b1000000; //to display 0
   5'd1 : sseg_LEDs = 7'b1111001; //to display 1
   5'd2 : sseg_LEDs = 7'b0100100; //to display 2
   5'd3 : sseg_LEDs = 7'b0110000; //to display 3
   5'd4 : sseg_LEDs = 7'b0011001; //to display 4
   5'd5 : sseg_LEDs = 7'b0010010; //to display 5
   5'd6 : sseg_LEDs = 7'b0000010; //to display 6
   5'd7 : sseg_LEDs = 7'b1111000; //to display 7
   5'd8 : sseg_LEDs = 7'b0000000; //to display 8
   5'd9 : sseg_LEDs = 7'b0010000; //to display 9
   5'd10: sseg_LEDs = 7'b0001000; //to display a
   5'd11: sseg_LEDs = 7'b0000011; //to display b
   5'd12: sseg_LEDs = 7'b1000110; //to display c
   5'd13: sseg_LEDs = 7'b0100001; //to display d
   5'd14: sseg_LEDs = 7'b0000110; //to display e
   5'd15: sseg_LEDs = 7'b0001110; //to display f
   5'd16: sseg_LEDs = 7'b0111111; //benim eksi
   5'd17: sseg_LEDs = 7'b1110111; // alt cizgi _
   5'd18: sseg_LEDs = 7'b1000001; //u icin
   default : sseg_LEDs = 7'b0111111; //dash
  endcase
 end
 
assign an = digit_en;
assign seg = sseg_LEDs; 
assign dp = 1'b1; //turn dp off
 
 
endmodule














`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 07.05.2019 22:42:22
// Design Name: 
// Module Name: clockDivider
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module clockDivider(input clk_in, 
                    output clk_out);

    logic [25:0] count = {26{1'b0}};
    logic clk_NoBuf;
    always@ (posedge clk_in) 
        begin
            count <= count + 1;
        end
        
    // you can modify 25 to have different clock rate
    assign clk_NoBuf = count[24]; //bu 24te guzel oldu
    //yanik yer burasi 4snden fazla
    
    BUFG BUFG_inst (.I(clk_NoBuf), // 1-bit input: Clock input
                     .O(clk_out)   // 1-bit output: Clock output
                     );        

endmodule

















`timescale 1ns / 1ps


module alu(input logic signed [7:0] a, b,
           input logic [2:0] signal,
           output int res,
           output logic displayU);
           
    //logic c;           
    //eightBitAdder myAdder(a, b, c);  
    
    int ain, bin;
    initial displayU = 0;
     
    
    always_comb
        begin
        if (a[7] == 1)
            ain = a[6:0] - 128;
        else 
            ain = a;
        if (b[7] == 1)
            bin = b[6:0] - 128;
        else
            bin = b;
        case(signal)
            3'b000: //reset
                begin
                    res = 16'b0;
                    displayU = 0; 
                end
            3'b001: //toplama
                begin
                    res = ain + bin;
                    displayU = 0;
                end 
            3'b010: //mult
                begin 
                    res = ain * bin;
                    displayU = 0; 
                end
            3'b011: //division
                begin
                    if (bin == 0)
                        displayU = 1;
                    else
                        displayU = 0;
                    res = ain / bin;
                end 
            3'b100: //div rem
                begin
                    res = ain % bin;
                    displayU = 0; 
                end
            default: 
                begin
                    res = 16'b0;
                    displayU = 0;
                end
        endcase
        end
               
endmodule


















# This file is a general .xdc for the Basys3 rev B board 
# To use it in a project: 
# - uncomment the lines corresponding to used pins 
# - rename the used ports (in each line, after get_ports) according to the top level signal names in the project 

# Clock signal 
set_property PACKAGE_PIN W5 [get_ports clk]  	 	 	 	  
 	set_property IOSTANDARD LVCMOS33 [get_ports clk] 
# create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk] 

# Switches 
set_property PACKAGE_PIN V17 [get_ports {secondNumber[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {secondNumber[0]}] 
set_property PACKAGE_PIN V16 [get_ports {secondNumber[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {secondNumber[1]}] 
set_property PACKAGE_PIN W16 [get_ports {secondNumber[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {secondNumber[2]}] 
set_property PACKAGE_PIN W17 [get_ports {secondNumber[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {secondNumber[3]}] 
set_property PACKAGE_PIN W15 [get_ports {secondNumber[4]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {secondNumber[4]}] 
set_property PACKAGE_PIN V15 [get_ports {secondNumber[5]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {secondNumber[5]}] 
set_property PACKAGE_PIN W14 [get_ports {secondNumber[6]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {secondNumber[6]}] 
set_property PACKAGE_PIN W13 [get_ports {secondNumber[7]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {secondNumber[7]}] 
set_property PACKAGE_PIN V2 [get_ports {firstNumber[0]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {firstNumber[0]}] 
set_property PACKAGE_PIN T3 [get_ports {firstNumber[1]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {firstNumber[1]}] 
set_property PACKAGE_PIN T2 [get_ports {firstNumber[2]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {firstNumber[2]}] 
set_property PACKAGE_PIN R3 [get_ports {firstNumber[3]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {firstNumber[3]}] 
set_property PACKAGE_PIN W2 [get_ports {firstNumber[4]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {firstNumber[4]}] 
set_property PACKAGE_PIN U1 [get_ports {firstNumber[5]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {firstNumber[5]}] 
set_property PACKAGE_PIN T1 [get_ports {firstNumber[6]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {firstNumber[6]}] 
set_property PACKAGE_PIN R2 [get_ports {firstNumber[7]}] 	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports {firstNumber[7]}] 
  
# LEDs 
     set_property PACKAGE_PIN U16 [get_ports {ledsSecond[0]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsSecond[0]}] 
     set_property PACKAGE_PIN E19 [get_ports {ledsSecond[1]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsSecond[1]}] 
     set_property PACKAGE_PIN U19 [get_ports {ledsSecond[2]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsSecond[2]}] 
     set_property PACKAGE_PIN V19 [get_ports {ledsSecond[3]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsSecond[3]}] 
     set_property PACKAGE_PIN W18 [get_ports {ledsSecond[4]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsSecond[4]}] 
     set_property PACKAGE_PIN U15 [get_ports {ledsSecond[5]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsSecond[5]}] 
     set_property PACKAGE_PIN U14 [get_ports {ledsSecond[6]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsSecond[6]}] 
     set_property PACKAGE_PIN V14 [get_ports {ledsSecond[7]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsSecond[7]}] 
     set_property PACKAGE_PIN V13 [get_ports {ledsFirst[0]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsFirst[0]}] 
     set_property PACKAGE_PIN V3 [get_ports {ledsFirst[1]}]                          
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsFirst[1]}] 
     set_property PACKAGE_PIN W3 [get_ports {ledsFirst[2]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsFirst[2]}] 
     set_property PACKAGE_PIN U3 [get_ports {ledsFirst[3]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsFirst[3]}] 
     set_property PACKAGE_PIN P3 [get_ports {ledsFirst[4]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsFirst[4]}] 
     set_property PACKAGE_PIN N3 [get_ports {ledsFirst[5]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsFirst[5]}] 
     set_property PACKAGE_PIN P1 [get_ports {ledsFirst[6]}]                      
          set_property IOSTANDARD LVCMOS33 [get_ports {ledsFirst[6]}] 
     set_property PACKAGE_PIN L1 [get_ports {ledsFirst[7]}]                                   
         set_property IOSTANDARD LVCMOS33 [get_ports {ledsFirst[7]}] 
 	 
 	 
#7 segment display 
set_property PACKAGE_PIN W7 [get_ports {seg[0]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {seg[0]}] 
set_property PACKAGE_PIN W6 [get_ports {seg[1]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {seg[1]}] 
set_property PACKAGE_PIN U8 [get_ports {seg[2]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {seg[2]}] 
set_property PACKAGE_PIN V8 [get_ports {seg[3]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {seg[3]}] 
set_property PACKAGE_PIN U5 [get_ports {seg[4]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {seg[4]}] 
set_property PACKAGE_PIN V5 [get_ports {seg[5]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {seg[5]}] 
set_property PACKAGE_PIN U7 [get_ports {seg[6]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {seg[6]}] 
set_property PACKAGE_PIN V7 [get_ports dp]                       
     set_property IOSTANDARD LVCMOS33 [get_ports dp] 
set_property PACKAGE_PIN U2 [get_ports {an[0]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {an[0]}] 
set_property PACKAGE_PIN U4 [get_ports {an[1]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {an[1]}] 
set_property PACKAGE_PIN V4 [get_ports {an[2]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {an[2]}] 
set_property PACKAGE_PIN W4 [get_ports {an[3]}]                          
     set_property IOSTANDARD LVCMOS33 [get_ports {an[3]}] 

#Buttons 
set_property PACKAGE_PIN U18 [get_ports r]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports r] 
set_property PACKAGE_PIN T18 [get_ports m]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports m] 
set_property PACKAGE_PIN W19 [get_ports a]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports a] 
set_property PACKAGE_PIN T17 [get_ports d]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports d] 
set_property PACKAGE_PIN U17 [get_ports dr]  	 	 	 	 	 
 	set_property IOSTANDARD LVCMOS33 [get_ports dr] 
  
##Pmod Header JA 
##Sch name = JA1 
#set_property PACKAGE_PIN J1 [get_ports {JA[0]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[0]}] 
##Sch name = JA2 
#set_property PACKAGE_PIN L2 [get_ports {JA[1]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[1]}] 
##Sch name = JA3 
#set_property PACKAGE_PIN J2 [get_ports {JA[2]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[2]}] 
##Sch name = JA4 
#set_property PACKAGE_PIN G2 [get_ports {JA[3]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[3]}] 
##Sch name = JA7 
#set_property PACKAGE_PIN H1 [get_ports {JA[4]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[4]}] 
##Sch name = JA8 
#set_property PACKAGE_PIN K2 [get_ports {JA[5]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[5]}] 
##Sch name = JA9 
#set_property PACKAGE_PIN H2 [get_ports {JA[6]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[6]}] 
##Sch name = JA10 
#set_property PACKAGE_PIN G3 [get_ports {JA[7]}] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[7]}] 
##Pmod Header JB 
##Sch name = JB1 
#set_property PACKAGE_PIN A14 [get_ports {JB[0]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[0]}] 
##Sch name = JB2 
#set_property PACKAGE_PIN A16 [get_ports {JB[1]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[1]}] 
##Sch name = JB3 
#set_property PACKAGE_PIN B15 [get_ports {JB[2]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[2]}] ##Sch name = JB4 
#set_property PACKAGE_PIN B16 [get_ports {JB[3]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[3]}] 
##Sch name = JB7 
#set_property PACKAGE_PIN A15 [get_ports {JB[4]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[4]}] 
##Sch name = JB8 
#set_property PACKAGE_PIN A17 [get_ports {JB[5]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[5]}] 
##Sch name = JB9 
#set_property PACKAGE_PIN C15 [get_ports {JB[6]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[6]}] 
##Sch name = JB10  
#set_property PACKAGE_PIN C16 [get_ports {JB[7]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[7]}] 
  
##Pmod Header JC 
##Sch name = JC1 
#set_property PACKAGE_PIN K17 [get_ports {JC[0]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[0]}] 
##Sch name = JC2 
#set_property PACKAGE_PIN M18 [get_ports {JC[1]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[1]}] 
##Sch name = JC3 
#set_property PACKAGE_PIN N17 [get_ports {JC[2]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[2]}] 
##Sch name = JC4 
#set_property PACKAGE_PIN P18 [get_ports {JC[3]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[3]}] 
##Sch name = JC7 
#set_property PACKAGE_PIN L17 [get_ports {JC[4]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[4]}] 
##Sch name = JC8 
#set_property PACKAGE_PIN M19 [get_ports {JC[5]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[5]}] 
##Sch name = JC9 
#set_property PACKAGE_PIN P17 [get_ports {JC[6]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[6]}] 
##Sch name = JC10 
#set_property PACKAGE_PIN R18 [get_ports {JC[7]}]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[7]}] 

##Pmod Header JXADC 
##Sch name = XA1_P 
#set_property PACKAGE_PIN J3 [get_ports {JXADC[0]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[0]}] 
##Sch name = XA2_P 
#set_property PACKAGE_PIN L3 [get_ports {JXADC[1]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[1]}] 
##Sch name = XA3_P 
#set_property PACKAGE_PIN M2 [get_ports {JXADC[2]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[2]}] 
##Sch name = XA4_P 
#set_property PACKAGE_PIN N2 [get_ports {JXADC[3]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[3]}] 
##Sch name = XA1_N 
#set_property PACKAGE_PIN K3 [get_ports {JXADC[4]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[4]}] 
##Sch name = XA2_N 
#set_property PACKAGE_PIN M3 [get_ports {JXADC[5]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[5]}] 
##Sch name = XA3_N 
#set_property PACKAGE_PIN M1 [get_ports {JXADC[6]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[6]}] 
##Sch name = XA4_N 
#set_property PACKAGE_PIN N1 [get_ports {JXADC[7]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[7]}] 

##VGA Connector 
#set_property PACKAGE_PIN G19 [get_ports {vgaRed[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[0]}] 
#set_property PACKAGE_PIN H19 [get_ports {vgaRed[1]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[1]}] 
#set_property PACKAGE_PIN J19 [get_ports {vgaRed[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[2]}] 
#set_property PACKAGE_PIN N19 [get_ports {vgaRed[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[3]}] 
#set_property PACKAGE_PIN N18 [get_ports {vgaBlue[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[0]}] 
#set_property PACKAGE_PIN L18 [get_ports {vgaBlue[1]}] 	 	 	 	  		
	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[1]}] 
#set_property PACKAGE_PIN K18 [get_ports {vgaBlue[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[2]}] 
#set_property PACKAGE_PIN J18 [get_ports {vgaBlue[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[3]}] 
#set_property PACKAGE_PIN J17 [get_ports {vgaGreen[0]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[0]}] 
#set_property PACKAGE_PIN H17 [get_ports {vgaGreen[1]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[1]}] 
#set_property PACKAGE_PIN G17 [get_ports {vgaGreen[2]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[2]}] 
#set_property PACKAGE_PIN D17 [get_ports {vgaGreen[3]}]  	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[3]}] 
#set_property PACKAGE_PIN P19 [get_ports Hsync] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports Hsync] 
#set_property PACKAGE_PIN R19 [get_ports Vsync] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports Vsync] 

##USB-RS232 Interface 
#set_property PACKAGE_PIN B18 [get_ports RsRx] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports RsRx] 
#set_property PACKAGE_PIN A18 [get_ports RsTx] 	 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports RsTx] 

##USB HID (PS/2) 
#set_property PACKAGE_PIN C17 [get_ports PS2Clk] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Clk] 
 	#set_property PULLUP true [get_ports PS2Clk] 
#set_property PACKAGE_PIN B17 [get_ports PS2Data]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Data] 	 
 	#set_property PULLUP true [get_ports PS2Data] 

##Quad SPI Flash 
##Note that CCLK_0 cannot be placed in 7 series devices. You can access it using the 
##STARTUPE2 primitive. 
#set_property PACKAGE_PIN D18 [get_ports {QspiDB[0]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[0]}] 
#set_property PACKAGE_PIN D19 [get_ports {QspiDB[1]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[1]}] 
#set_property PACKAGE_PIN G18 [get_ports {QspiDB[2]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[2]}] 
#set_property PACKAGE_PIN F18 [get_ports {QspiDB[3]}] 	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[3]}] 
#set_property PACKAGE_PIN K19 [get_ports QspiCSn]  	 	 	 	 
 	#set_property IOSTANDARD LVCMOS33 [get_ports QspiCSn] 
 










